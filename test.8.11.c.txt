#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//int main()
//{
//	short s = 0;
//	int a = 10;
//	printf("%d\n", sizeof(s = a + 5));//sizeof里面的表达式并不参与运算
//	printf("%d\n", s);
//	return 0;
//}

//int main()
//{
//	int a = 0;
//	//~按位取反
//	//00000000000000000000000000000000	补
//	//11111111111111111111111111111111  取反（补）
//	//11111111111111111111111111111110  反
//	//10000000000000000000000000000001  原
//	printf("%d\n", ~a);
//	return 0;
//}

//int main()
//{
//	int a = 11;
//							//00000000000000000000000000001011
//	a = a | (1 << 2);		//00000000000000000000000000000100
//    	                  //a=00000000000000000000000000001111
//	printf("%d\n", a);
//	a = a & (~(1 << 2));  //~(00000000000000000000000000000100)
//						   //&11111111111111111111111111111011
//						  //a=00000000000000000000000000001011
//	printf("%d\n", a);
//	return 0;
//}
//
//int main()
//{
//	int a = 10;
//	//printf("%d\n", ++a);//前置++，先++，后使用
//	printf("%d\n", a++);//后置++，先使用，后++
//	printf("%d\n", a);
//	return 0;
//}


//void test1(int arr[])
//{
//	printf("%d\n", sizeof(arr));
//}
//
//void test2(char ch[])
//{
//	printf("%d\n", sizeof(ch));
//}
//int main()
//{
//	int arr[10] = { 0 }; 
//		char ch[10] = { 0 };
//		test1(arr);//传首元素的地址
//		test2(ch);
//	return 0;
//}

int main()
{
	int i = 0, a = 0, b = 2, c = 3, d = 4;
	//i = a++ && ++b && d++;
	i = a++ || ++b || d++;
	printf("a=%d\nb=%d\nc=%d\nd=%d\n", a, b, c, d);
	return 0;
}