int Add(int x, int y)
{
	return x + y;
}

int main()
{
	int (*pAdd)(int, int) = Add;//函数指针
	//int sum = (*pAdd)(1, 2);
	//int sum = pAdd(1, 2);//通过函数指针调用函数
	//printf("%d\n", sum);

	int(*pArr[5])(int, int) = { pAdd };//函数指针数组

	int(*(*ppArr)[5])(int, int) = &pArr;//指向函数指针数组的指针

	return 0;
}



void bubble_sort(int arr[], int sz)
{
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{
		int j = 0;
		for (j = 0; j < sz - 1 - i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
		}
	}
}

struct Stu
{
	char name[20];
	int age;
};


//void qsort(void* base,//指针
//	size_t num,
//	size_t width,//宽度
//	int(*cmp)(const void* e1, const void* e2)//函数指针参数为地址，void *p无类型指针可以接收任意类型的地址
//);//快速排序
//库函数引用头文件#include<stdlib.h>


int cmp_int(const void* e1, const void* e2)//比较两个整型值函数
{
	return *(int*)e1 - *(int*)e2;//强制类型转换
	//函数要求e1>e2，输出>0;e1=e2,输出0；e1<e2，输出<0
}


void test1()
{
	int arr[10] = { 9,8,7,6,5,4,3,2,1,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);

	qsort(arr/*数组名*/, sz/*元素个数*/,
		sizeof(arr[0])/*一个元素的大小*/,
		cmp_int/*比较函数*/);

	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
}


int cmp_float(const void*e1,const void*e2)
{
	return ((int)(*(float*)e1 - *(float*)e2));
}

void test2()
{
	float f[] = { 9.0,8.0,7.0,6.0,5.0,4.0 };
	int sz = (sizeof(f) / sizeof(f[0]));
	qsort(f, sz, sizeof(f[0]), cmp_float);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("%f ", f[i]);
	}
}


int cmp_Stu_age(const void* e1, const void* e2)
{
	return ((struct Stu*)e1)->age - ((struct Stu*)e2)->age;
}

int cmp_Stu_name(const void* e1, const void* e2)
{
	//字符串比较不能直接用<>=号，应该用strcmp函数
	return strcmp(((struct Stu*)e1)->name,((struct Stu*)e2)->name);
}

void test3()
{
  struct Stu s[3] = { {"zhangsan",20},{"lisi",30},{"wangwu",10} };
  int sz = sizeof(s) / sizeof(s[0]);
  //qsort(s, sz, sizeof(s[0]), cmp_Stu_age);
  qsort(s, sz, sizeof(s[0]), cmp_Stu_name);
}

int main()
{

	test1();
	
	test2();

	test3();
	//bubble_sort(arr, sz);

	return 0;
}